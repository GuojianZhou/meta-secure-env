UEFI Secure Boot
================

UEFI secure boot is the industry standard defined in the UEFI spec, allowing
the images loaded by UEFI BIOS to be verified with the trusted key.

A complete verification flow with UEFI secure boot is:
UEFI BIOS (UEFI secure boot enabled) ->
    grub2 (verified by DB certificate) ->
        kernel (verified by DB certificate)

Build
=====

In order to enable this feature, add the path to
feature/efi-secure-boot/template.conf to the init script.

Dependency
==========

This feature doesn't depend on other layer or template.

Key Management
==============

Note that the sample key and user key are the concepts in the key signing
model according to the ownership and secrecy. In UEFI secure boot, the policy
object such as PK, KEK, DB and DBX will be mapped to a key managed by the
key signing model.

Sample Keys
-----------
This template, by default, use the sample keys to sign and verify images for
the purpose of development and demonstration. Please ensure you know what your
risk is to use the sample keys in your product, because they are completely
public.

The sample keys are centrally placed under files/uefi_sb_keys/. This template
uses the following key pairs:

  * PK.pem
    The X509 certificate enrolled to UEFI BIOS, used to update/delete PK/KEK.

  * PK.key
    The private key corresponding to PK.pem, used to sign the EFI signature
    list for PK/KEK enrollment.

  * KEK.pem
    The X509 certificate enrolled to UEFI BIOS, used to update/delete
    DB/DBX.

  * KEK.key
    The private key corresponding to KEK.pem, used to sign the EFI signature
    list for DB/DBX enrollment.

  * DB.pem
    The X509 certificate enrolled to UEFI BIOS, used to verify the images
    directly loaded by UEFI BIOS.

  * DB.key
    The private key corresponding to DB.pem, used to sign the images directly
    loaded by UEFI BIOS.

  * DBX
    This directory contains any number of X509 certificate enrolled to UEFI
    BIOS, used to blacklist the revoked certificates. The revoked certificates
    must be PEM-formatted.

User Keys
---------
Refer to feature/user-key-store-test for the details about how to generate/use
the keys owned by the user.

Automatic Certificate Provision
-------------------------------
The certificate provision is required to enable UEFI secure boot. By default,
the target may be provisioned with the default certificates enrolled during the
manufacture.

In order to use the bootloader and kernel signed by the sample or self-owned
key to boot up the system, refer to the instructions listed in the section
"Work Flow For The First Boot".

Remove the enrolled certificates in BIOS setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The LockDown.efi application is used to run the provision. However,
LockDown.efi cannot be launched if UEFI secure boot is already enabled. In
addition, the enrolled certificates may be not the ones the user hopes to use.

The provisioned certificates can be removed in BIOS setup. The detailed steps
may vary between the boards. Refer to BIOS manual for the details.

Launch the automatic provision
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Lockdown.efi will automatically provision UEFI secure boot after removing the
the provisioned certificates in BIOS setup. More specifically, the PK, KEK,
DB and DBX (if any) will be enrolled and begin to take affect after a reboot.

Turn on UEFI secure boot option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If UEFI secure boot option is turned off, the user has to enter into BIOS setup
after provision to manually turn on the option.

If the option is already enabled when removing the enrolled certificates in
BIOS setup, this step can be ignored.

Re-trigger automatic provision
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
By default, the "Automatica Certificate Provision" option is hidden in boot
menu for the first boot. If the user would like to clear the certificates
provisioned by the "Automatica Certificate Provision" option in BIOS setup, this
hidden boot option will be shown in boot menu, allowing to re-trgger it when
necessary.

Verification
============

By default, the build system will use DB.key to automatically sign grub2 and
kernel image during the build. Meanwhile, LockDown.efi as above mentioned will
enroll the corresponding certificate into DB to grant the grub2/kernel
verification for the next boot.

Bootloader Verification
-----------------------
More specifically, UEFI BIOS will validate the integrity of grub2 before
running it with a certificate in DB. Usually, grub2 is signed with the
DB.key corresponding to DB.pem.

Either situation will cause the failure of verification.
- grub2 is not signed.
- grub2 is signed with DB.key which doesn't correspond to any certificate in
  DB.
- grub2 is signed with DB.key which corresponds to a certificate in DBX.

Of course, all above conclusions assume UEFI secure boot is already enabled.

Kernel Verification
-------------------
When grub2 loads kernel image with the chainloader command, if UEFI Secure
Boot is already enabled in BIOS, the UEFI BIOS uses the same rules to check
the integrity of kernel image.

- Kenrel image must be signed with DB.key.
- The DB.key must correspond to a certificate in DB.
- The DB.key mustn't correspond to any certificate in DBX.

Manually Sign Kernel Image
--------------------------
Run the following commands on the build host:

$ cd $project
$ tmp/sysroots/x86_64-linux/usr/bin/sbsign \
    --key <key> --cert <cert> --output bzImage.signed \
    tmp/deploy/images/intel-corei7-64/efi-unsigned/bzImage
$ tmp/sysroots/x86_64-linux/usr/bin/sbsign \
    --key <key> --cert <cert> --output grub.efi.signed \
    tmp/deploy/images/intel-corei7-64/efi-unsigned/bootx64.efi

where <key> is the private key file used to sign the kernel image, and <cert>
is the corresponding certificate file.

Out-of-box Experience
=====================

In most cases, the hardware coming out of the factory is already provisioned
with a default certificate used to verify the bootloader and issued by
Microsoft Corporation UEFI CA 2011. This kind of hardware is so-called
Microsoft certificated hardware.

This means the grub2 must be signed by Microsoft. Otherwise the system cannot
boot up. However, Microsoft signing policy refuses to sign any bootloaders
licensed under GPLv3.

For this situation, there are 2 solutions.

Note: assuming the end user still needs to use secure boot.

Run a key provision by self
---------------------------
A present user needs to disable UEFI secure boot in BIOS setup first and
enroll the self-owned certificate to replace the default Microsoft certificate,
and then sign grub2 and kernel with the self-owned key. Refer to the section
"Automatic Certificate Provision" for details about how to make the key
enrollment automatic, and refer to feature/user-key-store-test to use the
self-owned key for signing during the build.

Use MOK secure boot
-------------------
Alternately, the shim loader provided by MOK secure boot can be used without
the necessity of replacing the default Microsoft certificate. This is valuable
to avoid manual certificate provision for the user experience.

This solution hints the shim loader needs to be signed by Microsoft. MOK secure
boot can provide such a signed shim loader with some limits.

See feature/mok-secure-boot for the details about MOK secure boot and shim. See
feature/msft about the use of shim binary signed by Microsoft.

Work Flow For The First Boot
============================

Assuming the user uses UEFI secure boot only.

- Build a project with this template

- Deploy the rootfs

- Boot up the target board

- Enter to BIOS setup and remove the enrolled certificates
  * It is recommended to turn on UEFI secure boot option if allowed.

- Launch a reboot via ctrl + alt + del
  * Otherwise, a misleading error message about the verification failure
  will be displayed.

- Automatically boot to "Automatic Certificate Provision"

- (Optional) Enter into BIOS setup to turn on UEFI secure boot option

- Boot to the system with the protection provided by UEFI secure boot

Notes
=====

Don't use the linux command in grub.cfg
---------------------------------------
Be aware of the fact that the linux command used to parse and load kernel
image is not working on the verification of kernel image. Actually it
follows up linux boot protocol and doesn't run into the validation path
provided by UEFI secure boot. Therefore, the boot menu entry written in
grub.cfg must use the chainloader command like this:

menuentry 'Kernel Verification' {
    chainloader /bzImage.signed root=/dev/sdb2 rw rootwait
}

Note:
- The kernel must be configured with CONFIG_EFI_STUB enabled.
- The initrd command thus becomes not working because it depends on the
linux command, implying the detached initramfs image cannot be used with
the verification. To work around this issue, the initramfs can be bundled with
bzImage during the build, and thus the initrd image is trusted and verified
along with the kernel. 
- Alternately, use initrd= argument in this way to load the detached initramfs
  even though it is not trusted and verified:
    chainloader /bzImage.signed root=/dev/sdb2 rw rootwait initrd=<initrd>
